
// import { Link, useNavigate } from "react-router-dom";
// import { auth, db } from "../../../../firebase/config";
// {/**validaciones con yup */}
// import { schema } from "../RegisterForm/components/schemaRegisterForm";
// {/** hook-form-resolver */}
// import { yupResolver } from "@hookform/resolvers/yup";
// import { useForm } from "react-hook-form";

// import { createUserWithEmailAndPassword } from "firebase/auth";
// import { doc, setDoc } from "firebase/firestore";
// import Swal from "sweetalert2";



// export const RegisterForm = () => {
//     {/**ejemplo de https://www.react-hook-form.com/get-started/ */ }
//     {/** touchedFields, dirtyFields */ }
//     {/**const { register, handleSubmit, watch, formState: { errors }, trigger } = useForm({}); */ }
//     const navegar = useNavigate();

//     const { register, handleSubmit, formState: { errors }, trigger, } = useForm({
//         resolver: yupResolver(schema),
//     });
     // const onSubmit = data => console.log(data) => const onSubmit = data => {console.log(data)} para frenar el refresh de la page
//     const onSubmit = async (data) => {
//         try {
//             const userCredential = await createUserWithEmailAndPassword(auth, data.email, data.pass)
//             const user = userCredential.user;

    //guardar informacion adicional en firestore
//             await setDoc(doc(db, 'usuarios', user.uid), {
//                 name: data.name,
//                 lastname: data.lastname,
//                 birthDate: data.birthDate,
//                 email: data.email
//             });
//             navegar('/login', { state: { email: user.email } });
//         } catch (error) {
//             Swal.fire({
//                 icon: 'error',
//                 title: 'Error',
//                 text: 'Error al registrar el usuario. Por favor intente nuevamente'
//             });
//             console.error('Error al registrar el usuario', error)
//         }
//     };

     //console.log(watch("email")); // watch input value by passing the name of it

//     return (
//         <>
//             {/**para validar datos usaremos un schema  */}
//             <div className="home container-fluid Bienvenida">
//                 <div className="row">
//                     <div className=" col-md-3 bg-danger"></div>
//                     <div className="text-start col-md-6 align-items-center px-3 pt-5 pb-5 bg-success">
//                         <div className="card p-2">
//                             <form onSubmit={handleSubmit(onSubmit)} className="needs-validation" noValidate>
//                                 <div className="mb-3">
//                                     <h1 className="text-center">
//                                         <i className="fa-solid fa-user"></i>
//                                     </h1>
//                                 </div>
//                                 <div className="mb-3">
//                                     <label htmlFor="name" className="form-label">Nombre:</label>
//                                     <input type="text" placeholder="Ingresa tus nombres" className={`form-control ${errors.name ? 'is-invalid' : ''}`} id="fnameirstName" {...register('name')} onBlur={() => trigger('name')} />
//                                     {errors.name && <div className="invalid-feedback">{errors.name.message}</div>}
//                                 </div>
//                                 <div className="mb-3">
//                                     <label htmlFor="lastname" className="form-label">Apellido:</label>
//                                     <input type="text" placeholder="Ingresa tus apellidos" className={`form-control ${errors.lastname ? 'is-invalid' : ''}`} id="lastname" {...register('lastname')} onBlur={() => trigger('lastname')} />
//                                     {errors.lastname && <div className="invalid-feedback">{errors.lastname.message}</div>}
//                                 </div>
//                                 <div className="mb-3">
//                                     <label htmlFor="birthDate" className="form-label">Fecha de Nacimiento:</label>
//                                     <input type="date" className={`form-control ${errors.birthDate ? 'is-invalid' : ''}`} id="birthDate" {...register('birthDate')} onBlur={() => trigger('birthDate')}  />
//                                     {errors.birthDate && <div className="invalid-feedback">{errors.birthDate.message}</div>}
//                                 </div>
//                                 <div className="mb-3">
//                                     <label htmlFor="email" className="form-label">
//                                         Email:
//                                     </label>
//                                     {/* {onBlur={() => trigger('email')}  para validar el campo cuando pierde el foco onBlur className={`form-control ${errors.email ? 'is-invalid':''}`} usando validaciones de bootstrap */}
//                                     <input type="email" className={`form-control ${errors.email ? "is-invalid" : ""}`} id="email" placeholder="correo@ejemplo.ejemplo" {...register("email")} onBlur={() => trigger("email")} />
//                                     {/** adding errors */}
//                                     {errors.email && (<div className="invalid-feedback">{errors.email.message}</div>
//                                     )}
//                                 </div>
//                                 <div className="mb-3">
//                                     <label htmlFor="pass" className="form-label">
//                                         Contraseña:
//                                     </label>
//                                     <input type="password" className={`form-control ${errors.pass ? "is-invalid" : ""}`} id="pass" {...register("pass")} onBlur={() => trigger("pass")} />
//                                     {errors.pass && (<div className="invalid-feedback">{errors.pass.message}</div>
//                                     )}
//                                 </div>
//                                 <div className="mb-3">
//                                     <label htmlFor="confirmPass" className="form-label">
//                                         Confirma tu contraseña:
//                                     </label>
//                                     <input type="password" className={`form-control ${errors.confirmPass ? "is-invalid" : ""}`} id="confirmPass" {...register("confirmPass")} onBlur={() => trigger("confirmPass")} />
//                                     {errors.confirmPass && (<div className="invalid-feedback">{errors.confirmPass.message}</div>)}
//                                 </div>
//                                 <button type="submit" className="btn btn-primary">
//                                     Submit
//                                 </button>
//                                 <Link to="/login" className="btn btn-success ms-3">
//                                     Ir al Login
//                                 </Link>
//                             </form>
//                         </div>
//                     </div>
//                     <div className="col-md-3 bg-danger"></div>
//                 </div>
//             </div>
//         </>
//     );
// };
